<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:mah="http://metro.mahapps.com/winfx/xaml/shared"
                    xmlns:CircularGauge="clr-namespace:CircularGauge;assembly=CircularGauge"

                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    mc:Ignorable="options"
 >

    <!--<SolidColorBrush x:Key="MainBackgroundColor" Color="#FFF5F5F5" />
    <SolidColorBrush x:Key="MainForeground" Color="#FF5A5C5F" />
    <SolidColorBrush x:Key="MenuBackgroundColor" Color="#FF333c45" />-->

    <SolidColorBrush x:Key="MainBackgroundColor" Color="#FFF5F5F5" />
    <SolidColorBrush x:Key="MainForeground" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="MenuBackgroundColor" Color="#FF333333" />
    <SolidColorBrush x:Key="HeaderForeground" Color="#FFd25d0a" />
    <SolidColorBrush x:Key="MenuTabBackground" Color="#FF171717" />
    <SolidColorBrush x:Key="GroupBoxBackground" Color="#FF252525" />


    <Style x:Key="GeneralMetroWindowStyle" TargetType="{x:Type controls:MetroWindow}">
        <Setter Property="WindowTitleBrush"  Value="{StaticResource MenuBackgroundColor}" />
        <Setter Property="NonActiveWindowTitleBrush" Value="{StaticResource MenuBackgroundColor}" />
        <Setter Property="BorderBrush"   Value="{StaticResource MenuBackgroundColor}" />
        <Setter Property="WindowTransitionsEnabled"  Value="False"/>
        <Setter Property="WindowState" Value="Maximized"  />

    </Style>


    <Style x:Key="GeneralWindowTitleTemplate" TargetType="{x:Type TextBlock}">
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="Foreground" Value="{StaticResource HeaderForeground}"  />
        <Setter Property="FontSize" Value="17" />
        <Setter Property="Margin" Value="5,3,0,0" />
    </Style>

    <Style x:Key="GeneralTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Foreground" Value="{StaticResource MainForeground}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>



    <Style x:Key="DataGridHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Height" Value="30"/>
        <!--<Setter Property="Background"  Value="White" />-->
        <Setter Property="Foreground" Value="{DynamicResource MainForeground}"/>
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="5,0,0,0" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="BorderThickness" Value="0,0,0,2" />
        <Setter Property="BorderBrush" Value="{DynamicResource MainBackgroundColor}" />
        <Setter Property="Margin" Value="0,0,-2,0" />
        <Setter Property="controls:ControlsHelper.ContentCharacterCasing" Value="Upper"/>

    </Style>


    <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Foreground" Value="{DynamicResource MainForeground}"/>
        <Setter Property="Padding" Value="3,0,0,0" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="MinHeight" Value="25" />
    </Style>

    <Style x:Key="GroupBoxHeaderTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Foreground" Value="{DynamicResource MainForeground}"/>
        <Setter Property="FontWeight" Value="Normal" />
    </Style>


    <Style TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource HighlightBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="controls:ControlsHelper.ContentCharacterCasing" Value="Upper"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Foreground" Value="{DynamicResource HighlightBrush}"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Padding" Value="2,3"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0.7"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_ContentPresenter">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused"/>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{x:Null}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0"/>
                        <controls:ContentControlEx x:Name="PART_ContentPresenter" ContentCharacterCasing="{Binding (controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource GrayBrush8}"/>
                            <Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource BlackBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="TextBoxBorderBrush" Color="#FF878686" options:Freeze="True" />
    <SolidColorBrush x:Key="ControlsDisabledBrush" Color="#19FFFFFF" options:Freeze="True" />




    <CircularGauge:BackgroundColorConverter x:Key="backgroundColorConverter" />
    <CircularGauge:RadiusToDiameterConverter x:Key="radiusToDiameterConverter"/>
    <CircularGauge:SizeConverter x:Key="sizeConverter" />
    <CircularGauge:ImageOffsetConverter x:Key="imageOffsetConverter" />
    <CircularGauge:ColorToSolidColorBrushConverter x:Key="colorToSolidColorBrushConverter" />
    <CircularGauge:RangeIndicatorLightPositionConverter x:Key="rangeIndicatorLightPositionConverter"/>
    <CircularGauge:PointerCenterConverter x:Key="pointerCenterConverter"/>
    <CircularGauge:GlassEffectWidthConverter x:Key="glassEffectWidthConverter" />

    <Style x:Key="TempCurrentGaugeStyle" TargetType="{x:Type CircularGauge:CircularGaugeControl}" >
        <Setter Property="ResetPointerOnStartUp" Value="True" />
        <Setter Property="ScaleValuePrecision" Value="5" />
        <Setter Property="RangeIndicatorThickness" Value="5"/>
        <Setter Property="BelowOptimalRangeColor" Value="#FF469408" />
        <Setter Property="OptimalRangeColor" Value="#FFe69a2a" />
        <Setter Property="AboveOptimalRangeColor" Value="#FFea6c41" />
        <Setter Property="DialTextColor" Value="White" />
        <Setter Property="DialTextFontSize" Value="8" />

        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CircularGauge:CircularGaugeControl}">
                    <!-- Root Grid-->
                    <Grid x:Name="LayoutRoot" 
        						Height="{Binding Radius, Converter={StaticResource radiusToDiameterConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
        						Width="{Binding Radius, Converter={StaticResource radiusToDiameterConverter}, RelativeSource={RelativeSource TemplatedParent}}" >

                        <Ellipse x:Name="OuterFrame" StrokeThickness="16"  Visibility="Collapsed"
        							Height="{Binding Radius, Converter={StaticResource radiusToDiameterConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
        							Width="{Binding Radius, Converter={StaticResource radiusToDiameterConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
        							Fill="{x:Null}" />

                        <!-- Gauge Image -->
                        <Image Source="{TemplateBinding ImageSource}" Visibility="Collapsed" 
        							Width="{Binding ImageSize, ConverterParameter=Width, Converter={StaticResource sizeConverter}, RelativeSource={RelativeSource TemplatedParent}}"                             
        							Height="{Binding ImageSize, ConverterParameter=Height, Converter={StaticResource sizeConverter}, RelativeSource={RelativeSource TemplatedParent}}"                              
        							RenderTransform="{Binding ImageOffset, Converter={StaticResource imageOffsetConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>

                        <!-- Dial Text -->
                        <TextBlock Text="{TemplateBinding DialText}"  
        							HorizontalAlignment="Center" VerticalAlignment="Center"  
        							Foreground="{Binding DialTextColor, Converter={StaticResource colorToSolidColorBrushConverter}, RelativeSource={RelativeSource TemplatedParent}}"
        							FontSize="{TemplateBinding DialTextFontSize}"                             
                                                         
        							RenderTransform="{Binding DialTextOffset, Converter={StaticResource rangeIndicatorLightPositionConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>

                        <!-- Pointer -->
                        <Path x:Name="Pointer" 
                              Stroke="#FF807E7E" 
                              StrokeThickness="2" 
    						  Width="{TemplateBinding PointerLength}" 
    						  Height="{TemplateBinding PointerThickness}" HorizontalAlignment="Center"
    						  Data="M1,1 L1,1 L150,1 z" Stretch="Fill"  RenderTransformOrigin="0,0.3" 
    						  RenderTransform="{Binding PointerLength, Converter={StaticResource pointerCenterConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
                              Fill="#FF807E7E"/>

                        <!--Pointer Cap-->
                        <Ellipse x:Name="PointerCap" 
                                 Height="{TemplateBinding PointerCapRadius}" 
                                 Width="{TemplateBinding PointerCapRadius}"  
                                 Fill="{StaticResource GroupBoxBackground}"
                                 Stroke="#FF807E7E" 
                                 StrokeThickness="2"/>

                        <!--Range indicator light-->
                        <Ellipse x:Name="RangeIndicatorLight" Visibility="Collapsed"
        							Height="{Binding RangeIndicatorLightRadius, Converter={StaticResource radiusToDiameterConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
        							Width="{Binding RangeIndicatorLightRadius, Converter={StaticResource radiusToDiameterConverter}, RelativeSource={RelativeSource TemplatedParent}}"                              
        							RenderTransform="{Binding RangeIndicatorLightOffset, Converter={StaticResource rangeIndicatorLightPositionConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
                                 Fill="#FFA9A6A6">
                            <!--Range indicator light off position effect-->
                        </Ellipse>

                        <!--Glass effect ellipse-->
                        <Path x:Name="GlassEffect" StrokeThickness="1" Stretch="Fill" VerticalAlignment="Bottom" Visibility="Collapsed"
        							Height="{TemplateBinding Radius}"
        							Width="{Binding Radius, Converter={StaticResource glassEffectWidthConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
        							Opacity="0.18" Data="M265.99997,151.00005 C263.99994,194.00003 209.55908,259 135.00064,259 C60.442207,259 11,200.00003 5.9999995,157.00005 C5.0181994,148.55656 73.000877,112.00006 137.00053,112.00007 C199.00887,112.00008 266.72015,135.5164 265.99997,151.00005 z" 
                              Fill="#FFA68686"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>